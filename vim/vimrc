:set number
:set autoindent
:set smartindent
:syntax enable
:set nocompatible
:set nowrap
:set backspace=2
nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader>i :call ToggleIndentation()<CR>
:let g:indent_guide_guide_size=1
:set laststatus=2
:map <space> <leader>


:set directory=~/.vimtmp//


"Bundle"
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" let Vundle manage Vundle
" required! 
Plugin 'VundleVim/Vundle.vim'
Plugin 'itchyny/lightline.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'vim-ruby/vim-ruby'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-haml'
Plugin 'kchmck/vim-coffee-script'
Plugin 'mtscout6/vim-cjsx'
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'
Plugin 'wavded/vim-stylus'
Plugin 'kien/ctrlp.vim'
Plugin 'tpope/vim-surround'
Plugin 'yggdroot/indentLine'

" Colorschemes
Plugin 'nanotech/jellybeans.vim' 
Plugin 'chriskempson/base16-vim'
Plugin 'tomasr/molokai' 
Plugin 'mustache/vim-mustache-handlebars'
call vundle#end()


filetype plugin indent on

colorscheme base16-railscasts
set background=dark
let g:lightline = {
 \ 'colorscheme': 'jellybeans',
 \ 'active': {
 \ 	'left': [ [ 'mode', 'paste'],
 \			[ 'fugitive', 'readonly', 'filename', 'modified' ] ]
 \ },
 \ 'component_function': {
 \		'fugitive': 'MyFugitive'
 \ },
 \ 'component': {
 \		'readonly': '%{&filetype=="help"?"":&readonly?"ReadOnly":""}',
 \		'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}'
 \ },
 \ 'component_visible_condition': {
 \		'readonly': '(&filetype!="help"&& &readonly)',
 \		'modified': '(&filetype!="help"&&(&modified||!&modifiable))'
 \ },
 \ 'separator': { 'left': '', 'right': '' },
 \ 'subseparator': { 'left': '', 'right': '' }
 \ }
let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist|tmp)|(\.(swp|ico|git|svn))$'

function! MyFugitive()
  if exists("*fugitive#head")
    let _ = fugitive#head()
    return strlen(_) ? ' '._ : ''
  endif
  return ''
endfunction



function SetSpaceIndentation()
	let g:cindentation = "spaces"
	set sw=2
	set ts=2
	set expandtab
	set smarttab
endfunction

function SetTabIndentation()
	let g:cindentation = "tabs"
	set sw=3
	set ts=3
	set noexpandtab
	set nosmarttab
endfunction


function ToggleIndentation()
	if g:cindentation == "tabs"
		call SetSpaceIndentation()
		echo "Space Indentation"
	else
		call SetTabIndentation()
		echo "Tab Indentation"
	endif
endfunction


let g:cindentation = "tabs"
set sw=3 ts=3 noexpandtab nosmarttab
let g:NERDTreeDirArrows = 1
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'

call SetTabIndentation()
set guifont=Hack:14

